package com.hsw.model;
// Generated 12.10.2015 15:58:50 by Hibernate Tools 4.0.0

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

/**
 * User generated by hbm2java
 */
@Entity
@Table(name = "user", catalog = "ticketverwaltung", uniqueConstraints = @UniqueConstraint(columnNames = "email") )
public class User implements java.io.Serializable {

	private String username;
	private String passwort;
	private String email;
	private String vorname;
	private String nachname;
	private Set<Project> projects = new HashSet<Project>(0);
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Ticket> ticketsForTicketIssuer = new HashSet<Ticket>(0);
	private Set<Ticket> ticketsForTicketAuthor = new HashSet<Ticket>(0);
	private Set<Role> roles = new HashSet<Role>(0);

	public User() {
	}

	public User(String username, String passwort, String email) {
		this.username = username;
		this.passwort = passwort;
		this.email = email;
	}

	public User(String username, String passwort, String email, String vorname, String nachname, Set<Project> projects,
			Set<Comment> comments, Set<Ticket> ticketsForTicketIssuer, Set<Ticket> ticketsForTicketAuthor,
			Set<Role> roles) {
		this.username = username;
		this.passwort = passwort;
		this.email = email;
		this.vorname = vorname;
		this.nachname = nachname;
		this.projects = projects;
		this.comments = comments;
		this.ticketsForTicketIssuer = ticketsForTicketIssuer;
		this.ticketsForTicketAuthor = ticketsForTicketAuthor;
		this.roles = roles;
	}

	@Id

	@Column(name = "username", unique = true, nullable = false, length = 40)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "passwort", nullable = false, length = 32)
	public String getPasswort() {
		return this.passwort;
	}

	public void setPasswort(String passwort) {
		this.passwort = passwort;
	}

	@Column(name = "email", unique = true, nullable = false, length = 40)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "vorname", length = 40)
	public String getVorname() {
		return this.vorname;
	}

	public void setVorname(String vorname) {
		this.vorname = vorname;
	}

	@Column(name = "nachname", length = 40)
	public String getNachname() {
		return this.nachname;
	}

	public void setNachname(String nachname) {
		this.nachname = nachname;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Project> getProjects() {
		return this.projects;
	}

	public void setProjects(Set<Project> projects) {
		this.projects = projects;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "user")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByTicketIssuer")
	public Set<Ticket> getTicketsForTicketIssuer() {
		return this.ticketsForTicketIssuer;
	}

	public void setTicketsForTicketIssuer(Set<Ticket> ticketsForTicketIssuer) {
		this.ticketsForTicketIssuer = ticketsForTicketIssuer;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "userByTicketAuthor")
	public Set<Ticket> getTicketsForTicketAuthor() {
		return this.ticketsForTicketAuthor;
	}

	public void setTicketsForTicketAuthor(Set<Ticket> ticketsForTicketAuthor) {
		this.ticketsForTicketAuthor = ticketsForTicketAuthor;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "user_role", catalog = "ticketverwaltung", joinColumns = {
			@JoinColumn(name = "username", nullable = false, updatable = false) }, inverseJoinColumns = {
					@JoinColumn(name = "role_name", nullable = false, updatable = false) })
	public Set<Role> getRoles() {
		return this.roles;
	}

	public void setRoles(Set<Role> roles) {
		this.roles = roles;
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof User) {
			User u = (User)o;
			if (u.getUsername().equals(this.username)) {
				return true;
			}
		}
		return false;
	}
}
